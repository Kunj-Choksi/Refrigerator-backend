test:
  service: Disk
  root: <%= Rails.root.join("tmp/storage") %>

local:
  service: Disk
  root: <%= Rails.root.join("storage") %>

google:
  service: GCS
  project: Refrigerator
  bucket: receipts_box
  credentials: 
    type: <%= ENV['GC_ACCOUNT_TYPE'] %>
    project_id: <%= ENV['GC_PROJECT_ID'] %>
    private_key_id: "<%= ENV['GC_PRIVATE_KEY_ID'] %>"
    private_key: "<%= ENV['GC_PRIVATE_KEY'] %>"
    client_email: <%= ENV['GC_CLIENT_EMAIL'] %>
    client_id: <%= ENV['GC_CLIENT_ID'] %>
    auth_uri: <%= ENV['GC_AUTH_URI'] %>
    token_uri: <%= ENV['GC_TOKEN_URI'] %>
    auth_provider_x509_cert_url: <%= ENV['GC_AUTH_PROVIDER_X509_CERT_URL'] %>
    client_x509_cert_url: <%= ENV['GC_CLIENT_X509_CERT_URL'] %>
    universe_domain: <%= ENV['GC_UNIVERSE_DOMAIN'] %>

# Use bin/rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
# amazon:
#   service: S3
#   access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
#   secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
#   region: us-east-1
#   bucket: your_own_bucket-<%= Rails.env %>

# Remember not to checkin your GCS keyfile to a repository
# google:
#   service: GCS
#   project: your_project
#   credentials: <%= Rails.root.join("path/to/gcs.keyfile") %>
#   bucket: your_own_bucket-<%= Rails.env %>

# Use bin/rails credentials:edit to set the Azure Storage secret (as azure_storage:storage_access_key)
# microsoft:
#   service: AzureStorage
#   storage_account_name: your_account_name
#   storage_access_key: <%= Rails.application.credentials.dig(:azure_storage, :storage_access_key) %>
#   container: your_container_name-<%= Rails.env %>

# mirror:
#   service: Mirror
#   primary: local
#   mirrors: [ amazon, google, microsoft ]
